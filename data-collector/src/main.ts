import { KuCoinDataCollector } from './index';
import { createLogger, format, transports } from 'winston';
import * as fs from 'fs';
import * as path from 'path';

// Logs dizinini olu≈ütur
const logsDir = path.join(__dirname, '../logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

// Main logger
const logger = createLogger({
  level: 'info',
  format: format.combine(
    format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
    format.errors({ stack: true }),
    format.printf(({ timestamp, level, message, ...meta }) => {
      const metaString = Object.keys(meta).length ? JSON.stringify(meta, null, 2) : '';
      return `${timestamp} [${level.toUpperCase()}]: ${message} ${metaString}`;
    })
  ),
  transports: [
    new transports.File({ 
      filename: path.join(logsDir, 'error.log'), 
      level: 'error',
      maxsize: 5242880, // 5MB
      maxFiles: 5
    }),
    new transports.File({ 
      filename: path.join(logsDir, 'combined.log'),
      maxsize: 5242880, // 5MB  
      maxFiles: 5
    }),
    new transports.Console({
      format: format.combine(
        format.colorize(),
        format.simple()
      )
    })
  ]
});

/**
 * Ana uygulama ba≈ülatƒ±cƒ±
 */
class DataCollectorApp {
  private collector: KuCoinDataCollector | null = null;

  async start(): Promise<void> {
    try {
      logger.info('üöÄ KuCoin Data Collector ba≈ülatƒ±lƒ±yor...');
      logger.info('üìã Sistem Bilgileri:');
      logger.info(`   - Node.js: ${process.version}`);
      logger.info(`   - Platform: ${process.platform}`);
      logger.info(`   - Memory: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} MB`);
      logger.info(`   - PID: ${process.pid}`);

      // Data collector'ƒ± ba≈ülat
      this.collector = new KuCoinDataCollector();
      
      logger.info('‚úÖ Data Collector ba≈ülatƒ±ldƒ±');
      logger.info('üîó WebSocket baƒülantƒ±larƒ± kuruluyor...');
      logger.info('üìä Market verileri toplanmaya ba≈ülanacak...');
      logger.info('‚è∞ Periyodik analiz: Her 5 dakikada bir');
      logger.info('üéØ Hedef: 50M$+ hacimli coinler');
      
      // Sistem saƒülƒ±k durumu
      this.startHealthCheck();
      
    } catch (error) {
      logger.error('‚ùå Data Collector ba≈ülatƒ±lƒ±rken hata:', error);
      process.exit(1);
    }
  }

  /**
   * Sistem saƒülƒ±k kontrol√º
   */
  private startHealthCheck(): void {
    setInterval(() => {
      const memUsage = process.memoryUsage();
      const memMB = Math.round(memUsage.heapUsed / 1024 / 1024);
      
      logger.info(`üíä Sistem Durumu - Memory: ${memMB}MB | Uptime: ${Math.round(process.uptime())}s`);
      
      // Y√ºksek memory kullanƒ±mƒ± uyarƒ±sƒ±
      if (memMB > 500) {
        logger.warn(`‚ö†Ô∏è Y√ºksek memory kullanƒ±mƒ±: ${memMB}MB`);
      }
      
    }, 5 * 60 * 1000); // Her 5 dakikada kontrol
  }

  /**
   * Graceful shutdown
   */
  async stop(): Promise<void> {
    try {
      logger.info('üõë Sistem kapatƒ±lƒ±yor...');
      
      if (this.collector) {
        this.collector.close();
        logger.info('‚úÖ Data Collector durduruldu');
      }
      
      logger.info('üëã G√ºle g√ºle!');
      process.exit(0);
      
    } catch (error) {
      logger.error('‚ùå Sistem kapatƒ±lƒ±rken hata:', error);
      process.exit(1);
    }
  }
}

// Uygulama ba≈ülatma
const app = new DataCollectorApp();

// Signal handling
process.on('SIGTERM', async () => {
  logger.info('üì® SIGTERM sinyali alƒ±ndƒ±');
  await app.stop();
});

process.on('SIGINT', async () => {
  logger.info('üì® SIGINT sinyali alƒ±ndƒ± (Ctrl+C)');
  await app.stop();
});

process.on('uncaughtException', (error) => {
  logger.error('‚ùå Yakalanmamƒ±≈ü hata:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Yakalanmamƒ±≈ü promise reddi:', reason);
  logger.error('Promise:', promise);
  process.exit(1);
});

// Ba≈ülat
if (require.main === module) {
  app.start().catch((error) => {
    logger.error('‚ùå Uygulama ba≈ülatƒ±lamadƒ±:', error);
    process.exit(1);
  });
}

export default DataCollectorApp;
